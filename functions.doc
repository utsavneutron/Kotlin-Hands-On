fun main(args: Array<String>) {
    println(labelMultiply(3, 4, "The result is: ")) -> Prints "The result is: 12
}
can also be written in different order
This is also called "Named Arguments"
fun main(args: Array<String>) {
    println(labelMultiply(operand2 =3, label ="The result is: ", operand1 = 4)) -> Prints "The result is: 12
}

fun labelMultiply(operand1: Int, operand2: Int, label: String) : String {
    return ("$label $(operand1+operand2))
}
This can be also written as:

fun labelMultiply(operand1: Int, operand2: Int, label: String) : String = "$label $(operand1 + operand2)" 

--------------------------------------------------------------------------------

fun main (args: String<Array>) {
    val emp = Employee("Jane")
    println(emp.upperCaseFirstName) -> Prints Jane
}

class Employee(val firstName: String){
    fun upperCaseFirstName() = firstName.toUpperCase()
}

-------------------------------------------------------------------------------

fun main(args: Array<String>){

    val car1: Car("blue","Toyota", 2015)
    val car2: Car("green","Ford", 2016)
    val car3: Car("red","Chevy", 2017)

    printColors(car1,car2,car3, str = "Color:")
}

For passing array to the function which only takes we use:
    val manyCars = arrayOf(car1,car2,car3)
    printColors(*manyCars) -> * is called spread operator



fun printColors(vararg cars: Car, str: String){ -> Can only have only one vararg
    for (car in cars) {
        println(car.color)
    }
}

data class Car(val color: String, val model: String, val year: Int){

}

-----------------------------------------------------------------------------

