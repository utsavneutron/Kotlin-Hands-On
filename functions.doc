fun main(args: Array<String>) {
    println(labelMultiply(3, 4, "The result is: ")) -> Prints "The result is: 12
}
can also be written in different order
This is also called "Named Arguments"
fun main(args: Array<String>) {
    println(labelMultiply(operand2 =3, label ="The result is: ", operand1 = 4)) -> Prints "The result is: 12
}

fun labelMultiply(operand1: Int, operand2: Int, label: String) : String {
    return ("$label $(operand1+operand2))
}
This can be also written as:

fun labelMultiply(operand1: Int, operand2: Int, label: String) : String = "$label $(operand1 + operand2)" 

--------------------------------------------------------------------------------

fun main (args: String<Array>) {
    val emp = Employee("Jane")
    println(emp.upperCaseFirstName) -> Prints Jane
}

class Employee(val firstName: String){
    fun upperCaseFirstName() = firstName.toUpperCase()
}

-------------------------------------------------------------------------------

fun main(args: Array<String>){

    val car1: Car("blue","Toyota", 2015)
    val car2: Car("green","Ford", 2016)
    val car3: Car("red","Chevy", 2017)

    printColors(car1,car2,car3, str = "Color:")
}

For passing array to the function which only takes we use:
    val manyCars = arrayOf(car1,car2,car3)
    printColors(*manyCars) -> * is called spread operator



fun printColors(vararg cars: Car, str: String){ -> Can only have only one vararg
    for (car in cars) {
        println(car.color)
    }
}

data class Car(val color: String, val model: String, val year: Int){

}

-----------------------------------------------------------------------------

Add String. to create extention function
You can use this instead of  .str

-----------------------------------------------------------------------------

Inline: When an inline function is compiled its body is directly substituted for the function call in other words it's not compiled to a function at all it's compiled to its body.

Add inline: Works best with Lambda Parameters

inline fun labelMultiply(operand1)
-----------------------------------------------------------------------------

Inheritance:
Everthing in Kotlin is public and final by default.

open class Printer { -> Open keyword tells compiler that we want classes to be able to extend it

}

class LaserPrinter: Printer {
    constructor(): super() -> If we didn't want primary constructor
}

or we can:

open class Printer() {

}

class LaserPrinter(): Printer() {

}

and we can type like this:

fun main(args: Array<String>) {
    val laserPrinter = LaserPrinter("Brother 6969")
    laserPrinter.printModel()
}

abstract class Printer(val modelName: String){

    open fun printModel() = println("The model name of this printer is $modelName) -> when you want function to be extendable or to be able to be overridden you have to use the open keyword unless its abstract.

    abstract fun bestSellingPrice(): Double -> abstract functions are open by default
}
 -> No need of open keyword because abstract is present.

class LaserPrinter(modelName: String: Printer(modelName)){
    override fun printModel() = println("The model name of this laser printter is $modelName) -> Need override keyword to override a function

    override fun bestSellingPrice(): Double = 129.99 -> Always have to use override
}


data class DataClass(val number: Int) { -> Data Classes are closed tight and they can't be extended. They can't be abstract or inner classes.

}

------------------------------------------------------------------------------

Interfaces

open class something: mySubInterface [
    val someProperty: String

    constructor(somePerimeter: String){
        someProperty = somePerimeter
        println("I'm in the parent's constructor")
    }
]

interface myInterface { -> You dont create instance for interface
    val number: Int
    fun myfunction(str: String): String
}

interface mySubInterface: myInterface {
    fun mysubfunction(num: Int): String
}

-------------------------------------------------------------------------------

Singletons in Kotlin

In Kotlin, there's a way to declare a class and define an instance at the same time, and this is where the object keyword comes in. Now there are three typical use cases for the object keyword, the first use case is singletons, the second use case is what's called companion objects and the third use case is object expressions. 

Singleton is a common design pattern in Java, we use it when we want one and only one instance of a class during the running of an application. In java, We declare a class, it has a private constructor and then the outside world gets access to the single instance that the class creates. And it gets access to this instance using static method.

In Kotlin, we use the object keyword because there can only ever be on instance of object class. 

import java.time.Year

fun main(args: Array<String>) {
    println(CompanyCommunications.getTagLine())
    println(CompanyCommunications.getCopyrightLine())
}

object CompanyCommunications {
    val currentYear = Year.now().value

    fun getTagLine() = "Our Company Rocks!"
    fun getCopyrightLine() = "Copyright \u00A9 $currentYear Our Company. All rights reserved"
}

------------------------------------------------------------------------------

Companion object

object CompanyCommunications {
    val currentYear = Year.now().value

    fun getTagLine() = "Our Company Rocks!"
    fun getCopyrightLine() = "Copyright \u00A9 $currentYear Our Company. All rights reserved"
}

class Someclass {
    private val privateVar = 6

    fun accessPrivateVar() {
        println("I'm accessing privateVar: $private)
    }
}
Instead with companin object we can do:

class Someclass {
    companion object {
        private val privateVar = 6

        fun accessPrivateVar() = "I'm accessing privateVar: $privateVar"
    }
}

println(someClass.Companion.accessPrivateVar())

class Someclass {
    companion object SomeCompanion{
        private val privateVar = 6

        fun accessPrivateVar() = "I'm accessing privateVar: $privateVar"
    }
}
println(someClass.SomeCompanion.accessPrivateVar())

We can use Companion objects to call private constructors, and to implement factory pattern.

-----------------------------------------------------------------------------

Enum:

println(department.ACT.getDeptInfo())

enum class Department(val fullName: String, val numEmployees: Int) {
    HR('Human Resource', 5), IT('Information Technology", 10),
    ACT('Accounting',3), Sales('Sales',20);

    fun getDeptInfo() = "The $fullName department has $numEmployees employees"
}
------------------------------------------------------------------------------

import

IntelliJ automatically imports functions from other file

-------------------------------------------------------------------------

Internal access

internal keyword makes it closed to only one module. Function can be made internal to make it private. If you use private keywork in class or function, then internal becomes meaningless.

