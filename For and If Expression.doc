If and while loop hasn't changed in Kotlin

For loop has changed.

in Java, for loop used to be:
    for(int i=0; i<=10; i++)

In Kotlin,

val range = 1..5

val charRange = 'a'..'z'
val stringRange = "ABD".."XYZ"

println(3 in range)
println('q' in charRange)
println('CCC' in stringRange)
println('CCCCCC' in stringRange)
println('ZZZZZ' in stringRange) -> False

val backwardRange = 5.downTo(1)

val stepRange = 3..15
val stepThree = stepRange.step(3)
val reversedRange = stepRange.reverse()


for (i in 1..5) {
    println(i)
}

for (num in 1..20 step 4){
    println(num)
}

for (i in 20 downTo 15) {
    print(i)
}

val str = 'Hello'
for (c in str) {
    println(c)
}

val seasons = arrayOf("sprint", "summer", "winter", "fall")

for (season in seasons) {
    println(season)
}

for(in dex in seasons.indices) {
    println("${seasons[index]} is season number $index")
}

seasons.forEach(println(it))
seasons.forEachIndexed(index, value -> println("$value is season number $index"))


val notASeason = "whatever" !in seasons
println(notASeason)

val notInRange = 32 !in 1..10
println(notInRange)

val str = "Hello"
println('e' in str)
println('e' !in str)

for (i in 1..3){
    println("i = $i")
    jloop@ for (j in 1..4){
        println("j = $j")
        for (k in 5..10) {
            println("k = $k")
            if(k==7) {
                break@jloop;
            }
        }
    }
}

-----------------------------------------------------------------------

If expression

fun main(args: Array<String>) {
    var num: Int

    if(someCondition){
        num = 50
    }
}

println("The result of the if expression is ${if(someCondition{
    println("something")
    50
}
else{
    println("something else")
    592
}
})}")

-------------------------------------------------------------------------

When statement is similar to Switch Statement

fun main(args: Array<String>){
    val num = 200

    when(num) {
        100 -> println("100")
        200 -> println("200")
        300 -> println("300")
        else -> println("Doesn't match anything")
    }
}
or we can also do

fun main(args: Array<String>){
    val num = 200

    when(num) {
        100,500 -> println("100")
        in 200..299 -> println("Range between 200 and 299")
        300 -> println("300")
        else -> println("Doesn't match anything")
    }
}

or we can also do
fun main(args: Array<String>){
    val y = 10

    when(num) {
        y + 80 -> println("90")
        y + 90 -> println("100")
        300 -> println("300")
        else -> println("Doesn't match anything")
    }
}

val something: Any = obj2

when(something) {
    is String -> println(something.toUpperCase)
    is BigDecimal -> println(something.remainder(BigDecimal(10.5)))
    is Int -> println("$(something -22)")
    else -> print("I have no idea")
}
And
Assigning value to variable

val z = when(something) {
    is String -> println(something.toUpperCase)
    is BigDecimal -> println(something.remainder(BigDecimal(10.5)))
    is Int -> println("$(something -22)")
    else -> print("I have no idea")
}

when(something) {
    is String -> {
        println(something.toUpperCase)
        1
    }
    is BigDecimal -> {
        println(something.remainder(BigDecimal(10.5)))
        2
    }
    is Int -> {
        println("$(something -22)")
        3
    }
    else -> {
        print("I have no idea")
        4
    }
}

With Enum,

enum class Season {
    spring, summer, winter, fall
}

fun main(args: Array<String>){
    val timeOfYear = Season.winter

    val str = when(timeOfYear) {
        Season.spring -> "Flowers are blooming"
        Season.summer -> "Its hot"
        Season.fall -> "It's getting cooler"
        Season.winter -> "I need a coat"
    }

    println(str)
}

----------------------------------------------------------------------------------------------------

Try/Catch Expression

fun main(args: String<Array>){
    println(getNumber("22.5"))
}

fun getNumber(str: String): Int {
    return try {
        Integer.parseInt(str)
    }
    catch(e: NumberFormatException) {
        0
    }
    finally {
        println("I'm in the finally block")
    }
}

Elvis Operator


fun main(args: String<Array>){
    println(getNumber("22.5")) ?: throw IllegalArgumentException("Number isn't an Int")
}

fun getNumber(str: String): Int? {
    return try {
        Integer.parseInt(str)
    }
    catch(e: NumberFormatException) {
        null
    }
    finally {
        println("I'm in the finally block")
    }
}

fun notImplementedYet(something: String): Nothing{
    throw IllegalArgumentException("Implement me!")
}